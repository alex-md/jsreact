{"mappings":"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","sources":["<anon>","src/scripts/minify.js"],"sourcesContent":["let DOM = {\n    go: document.getElementById(\"go\"),\n    input: document.getElementById(\"input\"),\n    output: document.getElementById(\"output\"),\n    stats: document.getElementById(\"stats\"),\n    log: document.getElementById(\"log\"),\n    optionsWrapper: document.getElementById(\"options\"),\n    options: {}\n};\nfunction initializeOptions() {\n    createOptions({\n        compilation_level: {\n            names: [\n                \"Whitespace\",\n                \"Simple\",\n                \"Advanced\"\n            ],\n            values: [\n                \"WHITESPACE_ONLY\",\n                \"SIMPLE_OPTIMIZATIONS\",\n                \"ADVANCED_OPTIMIZATIONS\"\n            ],\n            default: \"SIMPLE_OPTIMIZATIONS\",\n            label: \"Compilation Level\"\n        },\n        formatting: {\n            names: [\n                \"Pretty print\",\n                \"Print input delimiter\"\n            ],\n            values: [\n                \"pretty_print\",\n                \"print_input_delimiter\"\n            ],\n            default: \"pretty_print\",\n            label: \"Formatting\"\n        }\n    }, DOM.optionsWrapper, DOM.options);\n}\nfunction createOptions(options, wrapper, domOptions) {\n    let row;\n    let keys = Object.keys(options);\n    for(let i = 0; i < keys.length; i++){\n        i % 2 == 0 && ((row = document.createElement(\"div\")).classList.add(\"row\"), wrapper.appendChild(row));\n        let col = document.createElement(\"div\");\n        col.classList.add(\"col-sm-6\");\n        let inputgroup = document.createElement(\"div\");\n        inputgroup.classList.add(\"input-group\");\n        let inputgroupprepend = document.createElement(\"div\");\n        inputgroupprepend.classList.add(\"input-group-prepend\");\n        let title = document.createElement(\"span\");\n        title.classList.add(\"input-group-text\"), title.innerHTML = options[keys[i]].label;\n        let select = document.createElement(\"select\");\n        select.classList.add(\"form-control\"), domOptions[keys[i]] = select;\n        let selectoptions = options[keys[i]];\n        for(let j = 0; j < selectoptions.names.length; j++){\n            let option = document.createElement(\"option\");\n            option.value = selectoptions.values[j], option.innerHTML = selectoptions.names[j], select.appendChild(option);\n        }\n        select.value = selectoptions.default, inputgroupprepend.appendChild(title), inputgroup.appendChild(inputgroupprepend), inputgroup.appendChild(select), col.appendChild(inputgroup), row.appendChild(col);\n    }\n}\nfunction compile() {\n    DOM.go.disabled = true;\n    // Create a new span element for the spinner\n    let spinner = document.createElement(\"span\");\n    spinner.classList.add(\"spinner-border\", \"spinner-border-sm\", \"small-border\", \"my-auto\", \"mx-auto\");\n    spinner.setAttribute(\"role\", \"status\");\n    spinner.setAttribute(\"aria-hidden\", \"true\");\n    // Add the spinner to the button\n    DOM.go.innerHTML = \"\";\n    DOM.go.innerHTML += \"Compiling... \";\n    DOM.go.appendChild(spinner);\n    let url = buildURL(\"https://closure-compiler.appspot.com/compile\", {\n        js_code: DOM.input.value,\n        compilation_level: DOM.options.compilation_level.value,\n        output_format: \"json\",\n        output_info: [\n            \"compiled_code\",\n            \"warnings\",\n            \"errors\",\n            \"statistics\"\n        ],\n        formatting: DOM.options.formatting.value,\n        language_out: \"ECMASCRIPT_2015\"\n    });\n    let callback = function(data) {\n        let parsed;\n        try {\n            parsed = JSON.parse(data);\n        } catch (error) {\n            showError(\"Invalid response from the API.\");\n            return;\n        }\n        if (parsed.errors && parsed.errors.length > 0) {\n            showError(\"Compilation error: \" + parsed.errors[0].error + \" on line \" + parsed.errors[0].lineno);\n            return;\n        }\n        if (parsed.compiledCode) {\n            DOM.output.innerHTML = parsed.compiledCode.replace(/^\\s*'use strict';\\s*/, \"\").trim();\n            DOM.output.style.color = \"#000\";\n        }\n        if (parsed.statistics) {\n            let s = parsed.statistics;\n            DOM.stats.innerHTML = `Compressed ${s.originalSize} bytes down to ${s.compressedSize} bytes (${Math.round((s.originalSize - s.compressedSize) / s.originalSize * 100)}%)`;\n        }\n        // Remove the spinner from the button when compiling is done\n        DOM.go.innerHTML = \"Compile!\";\n        DOM.go.disabled = false;\n        clearInterval(blinkingInterval);\n        DOM.go.classList.remove(\"blink\");\n        DOM.go.classList.add(\"btn-success\");\n    };\n    let xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n        if (this.readyState === 4) {\n            if (this.status === 200) callback.call(window, xhttp.responseText);\n            else showError(\"An error occurred during the request.\");\n        }\n    };\n    xhttp.open(\"POST\", url);\n    xhttp.withCredentials = false;\n    xhttp.send();\n}\nfunction showError(errorMessage) {\n    DOM.output.innerHTML = errorMessage;\n    DOM.output.style.color = \"#b22b27\";\n    DOM.go.innerHTML = \"Compile!\";\n    DOM.go.disabled = false;\n    clearInterval(blinkingInterval);\n    DOM.go.classList.remove(\"blink\");\n    DOM.go.classList.add(\"btn-danger\");\n}\nfunction buildURL(domain, params) {\n    if (!domain.includes(\"?\")) domain += \"?\";\n    for(let key in params)if (Array.isArray(params[key])) params[key].forEach((param)=>addParameter(key, param));\n    else addParameter(key, params[key]);\n    function addParameter(key, param) {\n        domain += `${key}=${encodeURIComponent(param)}&`;\n    }\n    return domain.slice(0, -1);\n}\nfunction blink() {\n    DOM.go.classList.add(\"blink\");\n    let blinkingInterval1 = setInterval(()=>{\n        DOM.go.classList.toggle(\"\");\n    }, 500);\n    setTimeout(()=>{\n        clearInterval(blinkingInterval1);\n    }, 5000);\n    compile();\n}\nDOM.go.onclick = blink;\ninitializeOptions();\n\n//# sourceMappingURL=minify.8fec1e54.js.map\n","let DOM = {\n    go: document.getElementById(\"go\"),\n    input: document.getElementById(\"input\"),\n    output: document.getElementById(\"output\"),\n    stats: document.getElementById(\"stats\"),\n    log: document.getElementById(\"log\"),\n    optionsWrapper: document.getElementById(\"options\"),\n    options: {}\n};\nfunction initializeOptions() {\n    createOptions({\n        compilation_level: {\n            names: [\n                \"Whitespace\",\n                \"Simple\",\n                \"Advanced\"\n            ],\n            values: [\n                \"WHITESPACE_ONLY\",\n                \"SIMPLE_OPTIMIZATIONS\",\n                \"ADVANCED_OPTIMIZATIONS\"\n            ],\n            default: \"SIMPLE_OPTIMIZATIONS\",\n            label: \"Compilation Level\"\n        },\n        formatting: {\n            names: [\n                \"Pretty print\",\n                \"Print input delimiter\"\n            ],\n            values: [\n                \"pretty_print\",\n                \"print_input_delimiter\"\n            ],\n            default: \"pretty_print\",\n            label: \"Formatting\"\n        }\n    }, DOM.optionsWrapper, DOM.options);\n}\nfunction createOptions(options, wrapper, domOptions) {\n    let row;\n    let keys = Object.keys(options);\n    for (let i = 0; i < keys.length; i++) {\n        i % 2 == 0 && ((row = document.createElement(\"div\")).classList.add(\"row\"), wrapper.appendChild(row));\n        let col = document.createElement(\"div\");\n        col.classList.add(\"col-sm-6\");\n        let inputgroup = document.createElement(\"div\");\n        inputgroup.classList.add(\"input-group\");\n        let inputgroupprepend = document.createElement(\"div\");\n        inputgroupprepend.classList.add(\"input-group-prepend\");\n        let title = document.createElement(\"span\");\n        title.classList.add(\"input-group-text\"), title.innerHTML = options[keys[i]].label;\n        let select = document.createElement(\"select\");\n        select.classList.add(\"form-control\"), domOptions[keys[i]] = select;\n        let selectoptions = options[keys[i]];\n        for (let j = 0; j < selectoptions.names.length; j++) {\n            let option = document.createElement(\"option\");\n            option.value = selectoptions.values[j], option.innerHTML = selectoptions.names[j], select.appendChild(option);\n        }\n        select.value = selectoptions.default, inputgroupprepend.appendChild(title), inputgroup.appendChild(inputgroupprepend), inputgroup.appendChild(select), col.appendChild(inputgroup), row.appendChild(col);\n    }\n}\nfunction compile() {\n    DOM.go.disabled = true;\n    // Create a new span element for the spinner\n    let spinner = document.createElement(\"span\");\n    spinner.classList.add(\"spinner-border\", \"spinner-border-sm\", \"small-border\", \"my-auto\", \"mx-auto\");\n    spinner.setAttribute(\"role\", \"status\");\n    spinner.setAttribute(\"aria-hidden\", \"true\");\n\n    // Add the spinner to the button\n    DOM.go.innerHTML = \"\";\n    DOM.go.innerHTML += \"Compiling... \";\n    DOM.go.appendChild(spinner);\n\n    let url = buildURL('https://closure-compiler.appspot.com/compile', {\n        js_code: DOM.input.value,\n        compilation_level: DOM.options.compilation_level.value,\n        output_format: 'json',\n        output_info: ['compiled_code', 'warnings', 'errors', 'statistics'],\n        formatting: DOM.options.formatting.value,\n        language_out: 'ECMASCRIPT_2015'\n    });\n\n    let callback = function (data) {\n        let parsed;\n        try {\n            parsed = JSON.parse(data);\n        } catch (error) {\n            showError(\"Invalid response from the API.\");\n            return;\n        }\n\n        if (parsed.errors && parsed.errors.length > 0) {\n            showError(\"Compilation error: \" + parsed.errors[0].error + \" on line \" + parsed.errors[0].lineno);\n            return;\n        }\n\n        if (parsed.compiledCode) {\n            DOM.output.innerHTML = parsed.compiledCode.replace(/^\\s*'use strict';\\s*/, '').trim();\n            DOM.output.style.color = '#000';\n        }\n\n        if (parsed.statistics) {\n            let s = parsed.statistics;\n            DOM.stats.innerHTML = `Compressed ${s.originalSize} bytes down to ${s.compressedSize} bytes (${Math.round((s.originalSize - s.compressedSize) / s.originalSize * 100)}%)`;\n        }\n\n        // Remove the spinner from the button when compiling is done\n        DOM.go.innerHTML = 'Compile!';\n        DOM.go.disabled = false;\n        clearInterval(blinkingInterval);\n        DOM.go.classList.remove('blink');\n        DOM.go.classList.add('btn-success');\n    };\n\n    let xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function () {\n        if (this.readyState === 4) {\n            if (this.status === 200) {\n                callback.call(window, xhttp.responseText);\n            } else {\n                showError(\"An error occurred during the request.\");\n            }\n        }\n    };\n\n    xhttp.open('POST', url);\n    xhttp.withCredentials = false;\n    xhttp.send();\n}\nfunction showError(errorMessage) {\n    DOM.output.innerHTML = errorMessage;\n    DOM.output.style.color = '#b22b27';\n    DOM.go.innerHTML = 'Compile!';\n    DOM.go.disabled = false;\n    clearInterval(blinkingInterval);\n    DOM.go.classList.remove('blink');\n    DOM.go.classList.add('btn-danger');\n}\n\nfunction buildURL(domain, params) {\n    if (!domain.includes('?')) {\n        domain += '?';\n    }\n\n    for (let key in params) {\n        if (Array.isArray(params[key])) {\n            params[key].forEach(param => addParameter(key, param));\n        } else {\n            addParameter(key, params[key]);\n        }\n    }\n\n    function addParameter(key, param) {\n        domain += `${key}=${encodeURIComponent(param)}&`;\n    }\n\n    return domain.slice(0, -1);\n}\n\nfunction blink() {\n    DOM.go.classList.add('blink');\n    let blinkingInterval1 = setInterval(() => {\n        DOM.go.classList.toggle('');\n    }, 500);\n\n    setTimeout(() => {\n        clearInterval(blinkingInterval1);\n    }, 5000);\n\n    compile();\n}\n\nDOM.go.onclick = blink;\ninitializeOptions();\n"],"names":["DOM","go","document","getElementById","input","output","stats","log","optionsWrapper","options","showError","errorMessage","innerHTML","style","color","disabled","clearInterval","blinkingInterval","classList","remove","add","onclick","spinner","url","callback","xhttp","blinkingInterval1","setInterval","toggle","setTimeout","createElement","setAttribute","appendChild","buildURL","domain","params","key","includes","Array","isArray","forEach","param","addParameter","encodeURIComponent","slice","js_code","value","compilation_level","output_format","output_info","formatting","language_out","data","parsed","JSON","parse","error","errors","length","lineno","compiledCode","replace","trim","statistics","s","originalSize","compressedSize","Math","round","XMLHttpRequest","onreadystatechange","readyState","status","call","window","responseText","open","withCredentials","send","createOptions","wrapper","domOptions","row","keys","Object","i","col","inputgroup","inputgroupprepend","title","label","select","selectoptions","j","names","option","values","default"],"version":3,"file":"minify.8fec1e54.js.map"}