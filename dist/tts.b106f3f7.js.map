{"mappings":"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","sources":["src/scripts/tts.js"],"sourcesContent":["let api_key;\n\nfunction updateApiKey() {\n    isValidOpenAIKey(document.getElementById('apiKeyInput').value) ? document.getElementById('apiKeyInput').classList.remove('is-invalid') : document.getElementById('apiKeyInput').classList.add('is-invalid');\n    api_key = document.getElementById('apiKeyInput').value;\n}\n\nlet textToSpeechButton = document.querySelector('#textToSpeechButton');\nlet ttsAudio = document.querySelector('#ttsAudio');\ntextToSpeechButton.addEventListener('click', convertToSpeech);\n\nfunction isValidOpenAIKey(key) {\n    const regexPattern = /sk-[a-zA-Z0-9]{48}/;\n    return regexPattern.test(key);\n}\n\nfunction showToast() {\n    // Create the toast container\n    var toastContainer = document.createElement('div');\n    toastContainer.id = 'toastContainer';\n    toastContainer.classList.add('position-fixed', 'bottom-0', 'start-0', 'p-3');\n\n    // Create the toast\n    var toast = document.createElement('div');\n    toast.id = 'apiKeyToast';\n    toast.classList.add('toast');\n    toast.setAttribute('role', 'alert');\n    toast.setAttribute('aria-live', 'assertive');\n    toast.setAttribute('aria-atomic', 'true');\n\n    // Create the toast header\n    var toastHeader = document.createElement('div');\n    toastHeader.classList.add('toast-header', 'bg-warning');\n\n    var strong = document.createElement('strong');\n    strong.classList.add('mr-auto');\n    strong.textContent = 'Missing API Key';\n\n    var button = document.createElement('button');\n    button.type = 'button';\n    button.classList.add('ml-2', 'mb-1', 'close', 'hidden');\n    button.setAttribute('data-bs-dismiss', 'toast');\n    button.setAttribute('aria-label', 'Close');\n\n    toastHeader.appendChild(strong);\n\n    // Create the toast body\n    var toastBody = document.createElement('div');\n    toastBody.classList.add('toast-body', 'text-body-secondary');\n    toastBody.textContent = 'Please enter a valid OpenAI API key.';\n\n    // Append everything\n    toast.appendChild(toastHeader);\n    toast.appendChild(toastBody);\n    toastContainer.appendChild(toast);\n    document.body.appendChild(toastContainer);\n\n    // Initialize the toast\n    var toastEl = new bootstrap.Toast(toast);\n    toastEl.show();\n\n}\n\n\nfunction convertToSpeech() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log('start convertToSpeedch()');\n    const text = document.getElementById('textToSpeechInput').value;\n    const selectedVoice = document.querySelector('input[name=\"voice\"]:checked').value;\n    fetch('https://api.openai.com/v1/audio/speech', {\n        method: 'POST',\n        headers: {\n            Authorization: `Bearer ${api_key}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            model: 'tts-1',\n            input: text,\n            voice: selectedVoice.toLowerCase()\n        })\n    }).then((response) => {\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.blob();\n    }).then((blob) => {\n        const url = URL.createObjectURL(blob);\n        ttsAudio.src = url;\n        ttsAudio.play();\n    }).catch((error) => console.error('Error:', error));\n}\n\nlet mediaRecorder;\nlet audioChunks = [];\nlet isRecording = false;\nlet pressthenreleaseButton = document.querySelector('#pressthenreleaseButton');\nlet transcribedText = document.querySelector('#transcribedText');\npressthenreleaseButton.addEventListener('pointerdown', startRecording);\npressthenreleaseButton.addEventListener('pointerup', stopRecording);\nfunction toggleRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    if (isRecording) {\n        stopRecording();\n    } else {\n        startRecording();\n    }\n}\nfunction startRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log('start rec');\n    transcribedText.innerHTML = 'start rec...';\n    navigator.mediaDevices.getUserMedia({\n        audio: true\n    }).then((stream) => {\n        mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.ondataavailable = (e) => {\n            audioChunks.push(e.data);\n        };\n        mediaRecorder.onstop = (e) => {\n            const audioBlob = new Blob(audioChunks, {\n                type: 'audio/wav'\n            });\n            audioChunks = [];\n            const file = new File([\n                audioBlob\n            ], 'recordedAudio.wav', {\n                type: 'audio/wav'\n            });\n            convertToText(file);\n        };\n        mediaRecorder.start();\n        isRecording = true;\n        document.getElementById('recordingStatus').innerText = 'Recording...';\n        document.getElementById('recordButton').innerText = 'Stop Recording';\n    });\n}\nfunction stopRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log('stop rec');\n    transcribedText.innerHTML = 'stop rec... wait to transcript';\n    mediaRecorder.stop();\n    isRecording = false;\n    document.getElementById('recordingStatus').innerText = 'Not Recording';\n    document.getElementById('recordButton').innerText = 'Start Recording';\n}\n\nfunction convertToText(recordedFile) {\n    const fileInput = document.getElementById('speechToTextInput');\n    const file = recordedFile || fileInput.files[0];\n    const api_key = 'your_openai_api_key';\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('model', 'whisper-1');\n    fetch('https://api.openai.com/v1/audio/transcriptions', {\n        method: 'POST',\n        headers: {\n            Authorization: `Bearer ${api_key}`\n        },\n        body: formData\n    }).then((response) => {\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n    }).then((data) => {\n        const transcribedTextElement = document.getElementById('transcribedText');\n        if (transcribedTextElement) {\n            transcribedTextElement.innerText = data.text;\n        }\n        const textToSpeechInputElement = document.getElementById('textToSpeechInput');\n        if (textToSpeechInputElement) {\n            textToSpeechInputElement.value = data.text;\n        }\n        console.log(data);\n    }).catch((error) => console.error('Error:', error));\n}\n"],"names":["$c0180f830760a180$var$api_key","$c0180f830760a180$var$mediaRecorder","$c0180f830760a180$var$textToSpeechButton","document","querySelector","$c0180f830760a180$var$ttsAudio","$c0180f830760a180$var$isValidOpenAIKey","key","test","$c0180f830760a180$var$showToast","toastContainer","createElement","id","classList","add","toast","setAttribute","toastHeader","strong","textContent","button","type","appendChild","toastBody","body","bootstrap","Toast","show","addEventListener","console","log","text","getElementById","value","selectedVoice","fetch","method","headers","Authorization","JSON","stringify","model","input","voice","toLowerCase","then","response","ok","Error","status","blob","url","URL","createObjectURL","src","play","catch","error","$c0180f830760a180$var$audioChunks","$c0180f830760a180$var$isRecording","$c0180f830760a180$var$pressthenreleaseButton","$c0180f830760a180$var$transcribedText","$c0180f830760a180$var$startRecording","innerHTML","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","ondataavailable","e","push","data","onstop","audioBlob","Blob","recordedFile","fileInput","file","files","api_key","formData","FormData","append","json","transcribedTextElement","innerText","textToSpeechInputElement","$c0180f830760a180$var$convertToText","File","start","$c0180f830760a180$var$stopRecording","stop"],"version":3,"file":"tts.b106f3f7.js.map"}