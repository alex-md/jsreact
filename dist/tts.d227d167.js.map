{"mappings":"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","sources":["<anon>","src/scripts/tts.js"],"sourcesContent":["let api_key;\nfunction updateApiKey() {\n    isValidOpenAIKey(document.getElementById(\"apiKeyInput\").value) ? document.getElementById(\"apiKeyInput\").classList.remove(\"is-invalid\") : document.getElementById(\"apiKeyInput\").classList.add(\"is-invalid\");\n    api_key = document.getElementById(\"apiKeyInput\").value;\n}\nlet textToSpeechButton = document.querySelector(\"#textToSpeechButton\");\nlet ttsAudio = document.querySelector(\"#ttsAudio\");\ntextToSpeechButton.addEventListener(\"click\", convertToSpeech);\nfunction isValidOpenAIKey(key) {\n    const regexPattern = /sk-[a-zA-Z0-9]{48}/;\n    return regexPattern.test(key);\n}\nfunction showToast() {\n    // Create the toast container\n    var toastContainer = document.createElement(\"div\");\n    toastContainer.id = \"toastContainer\";\n    toastContainer.classList.add(\"position-fixed\", \"bottom-0\", \"start-0\", \"p-3\");\n    // Create the toast\n    var toast = document.createElement(\"div\");\n    toast.id = \"apiKeyToast\";\n    toast.classList.add(\"toast\");\n    toast.setAttribute(\"role\", \"alert\");\n    toast.setAttribute(\"aria-live\", \"assertive\");\n    toast.setAttribute(\"aria-atomic\", \"true\");\n    // Create the toast header\n    var toastHeader = document.createElement(\"div\");\n    toastHeader.classList.add(\"toast-header\", \"bg-warning\");\n    var strong = document.createElement(\"strong\");\n    strong.classList.add(\"mr-auto\");\n    strong.textContent = \"Missing API Key\";\n    var button = document.createElement(\"button\");\n    button.type = \"button\";\n    button.classList.add(\"ml-2\", \"mb-1\", \"close\", \"hidden\");\n    button.setAttribute(\"data-bs-dismiss\", \"toast\");\n    button.setAttribute(\"aria-label\", \"Close\");\n    toastHeader.appendChild(strong);\n    // Create the toast body\n    var toastBody = document.createElement(\"div\");\n    toastBody.classList.add(\"toast-body\", \"text-body-secondary\");\n    toastBody.textContent = \"Please enter a valid OpenAI API key.\";\n    // Append everything\n    toast.appendChild(toastHeader);\n    toast.appendChild(toastBody);\n    toastContainer.appendChild(toast);\n    document.body.appendChild(toastContainer);\n    // Initialize the toast\n    var toastEl = new bootstrap.Toast(toast);\n    toastEl.show();\n}\nfunction convertToSpeech() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log(\"start convertToSpeedch()\");\n    const text = document.getElementById(\"textToSpeechInput\").value;\n    const selectedVoice = document.querySelector('input[name=\"voice\"]:checked').value;\n    fetch(\"https://api.openai.com/v1/audio/speech\", {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${api_key}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            model: \"tts-1\",\n            input: text,\n            voice: selectedVoice.toLowerCase()\n        })\n    }).then((response)=>{\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.blob();\n    }).then((blob)=>{\n        const url = URL.createObjectURL(blob);\n        ttsAudio.src = url;\n        ttsAudio.play();\n    }).catch((error)=>console.error(\"Error:\", error));\n}\nlet mediaRecorder;\nlet audioChunks = [];\nlet isRecording = false;\nlet pressthenreleaseButton = document.querySelector(\"#pressthenreleaseButton\");\nlet transcribedText = document.querySelector(\"#transcribedText\");\npressthenreleaseButton.addEventListener(\"pointerdown\", startRecording);\npressthenreleaseButton.addEventListener(\"pointerup\", stopRecording);\nfunction toggleRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    if (isRecording) stopRecording();\n    else startRecording();\n}\nfunction startRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log(\"start rec\");\n    transcribedText.innerHTML = \"start rec...\";\n    navigator.mediaDevices.getUserMedia({\n        audio: true\n    }).then((stream)=>{\n        mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.ondataavailable = (e)=>{\n            audioChunks.push(e.data);\n        };\n        mediaRecorder.onstop = (e)=>{\n            const audioBlob = new Blob(audioChunks, {\n                type: \"audio/wav\"\n            });\n            audioChunks = [];\n            const file = new File([\n                audioBlob\n            ], \"recordedAudio.wav\", {\n                type: \"audio/wav\"\n            });\n            convertToText(file);\n        };\n        mediaRecorder.start();\n        isRecording = true;\n        document.getElementById(\"recordingStatus\").innerText = \"Recording...\";\n        document.getElementById(\"recordButton\").innerText = \"Stop Recording\";\n    });\n}\nfunction stopRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log(\"stop rec\");\n    transcribedText.innerHTML = \"stop rec... wait to transcript\";\n    mediaRecorder.stop();\n    isRecording = false;\n    document.getElementById(\"recordingStatus\").innerText = \"Not Recording\";\n    document.getElementById(\"recordButton\").innerText = \"Start Recording\";\n}\nfunction convertToText(recordedFile) {\n    const fileInput = document.getElementById(\"speechToTextInput\");\n    const file = recordedFile || fileInput.files[0];\n    const api_key = \"your_openai_api_key\";\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"model\", \"whisper-1\");\n    fetch(\"https://api.openai.com/v1/audio/transcriptions\", {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${api_key}`\n        },\n        body: formData\n    }).then((response)=>{\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n    }).then((data)=>{\n        const transcribedTextElement = document.getElementById(\"transcribedText\");\n        if (transcribedTextElement) transcribedTextElement.innerText = data.text;\n        const textToSpeechInputElement = document.getElementById(\"textToSpeechInput\");\n        if (textToSpeechInputElement) textToSpeechInputElement.value = data.text;\n        console.log(data);\n    }).catch((error)=>console.error(\"Error:\", error));\n}\n\n//# sourceMappingURL=tts.d227d167.js.map\n","let api_key;\n\nfunction updateApiKey() {\n    isValidOpenAIKey(document.getElementById('apiKeyInput').value) ? document.getElementById('apiKeyInput').classList.remove('is-invalid') : document.getElementById('apiKeyInput').classList.add('is-invalid');\n    api_key = document.getElementById('apiKeyInput').value;\n}\n\nlet textToSpeechButton = document.querySelector('#textToSpeechButton');\nlet ttsAudio = document.querySelector('#ttsAudio');\ntextToSpeechButton.addEventListener('click', convertToSpeech);\n\nfunction isValidOpenAIKey(key) {\n    const regexPattern = /sk-[a-zA-Z0-9]{48}/;\n    return regexPattern.test(key);\n}\n\nfunction showToast() {\n    // Create the toast container\n    var toastContainer = document.createElement('div');\n    toastContainer.id = 'toastContainer';\n    toastContainer.classList.add('position-fixed', 'bottom-0', 'start-0', 'p-3');\n\n    // Create the toast\n    var toast = document.createElement('div');\n    toast.id = 'apiKeyToast';\n    toast.classList.add('toast');\n    toast.setAttribute('role', 'alert');\n    toast.setAttribute('aria-live', 'assertive');\n    toast.setAttribute('aria-atomic', 'true');\n\n    // Create the toast header\n    var toastHeader = document.createElement('div');\n    toastHeader.classList.add('toast-header', 'bg-warning');\n\n    var strong = document.createElement('strong');\n    strong.classList.add('mr-auto');\n    strong.textContent = 'Missing API Key';\n\n    var button = document.createElement('button');\n    button.type = 'button';\n    button.classList.add('ml-2', 'mb-1', 'close', 'hidden');\n    button.setAttribute('data-bs-dismiss', 'toast');\n    button.setAttribute('aria-label', 'Close');\n\n    toastHeader.appendChild(strong);\n\n    // Create the toast body\n    var toastBody = document.createElement('div');\n    toastBody.classList.add('toast-body', 'text-body-secondary');\n    toastBody.textContent = 'Please enter a valid OpenAI API key.';\n\n    // Append everything\n    toast.appendChild(toastHeader);\n    toast.appendChild(toastBody);\n    toastContainer.appendChild(toast);\n    document.body.appendChild(toastContainer);\n\n    // Initialize the toast\n    var toastEl = new bootstrap.Toast(toast);\n    toastEl.show();\n\n}\n\n\nfunction convertToSpeech() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log('start convertToSpeedch()');\n    const text = document.getElementById('textToSpeechInput').value;\n    const selectedVoice = document.querySelector('input[name=\"voice\"]:checked').value;\n    fetch('https://api.openai.com/v1/audio/speech', {\n        method: 'POST',\n        headers: {\n            Authorization: `Bearer ${api_key}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            model: 'tts-1',\n            input: text,\n            voice: selectedVoice.toLowerCase()\n        })\n    }).then((response) => {\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.blob();\n    }).then((blob) => {\n        const url = URL.createObjectURL(blob);\n        ttsAudio.src = url;\n        ttsAudio.play();\n    }).catch((error) => console.error('Error:', error));\n}\n\nlet mediaRecorder;\nlet audioChunks = [];\nlet isRecording = false;\nlet pressthenreleaseButton = document.querySelector('#pressthenreleaseButton');\nlet transcribedText = document.querySelector('#transcribedText');\npressthenreleaseButton.addEventListener('pointerdown', startRecording);\npressthenreleaseButton.addEventListener('pointerup', stopRecording);\nfunction toggleRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    if (isRecording) {\n        stopRecording();\n    } else {\n        startRecording();\n    }\n}\nfunction startRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log('start rec');\n    transcribedText.innerHTML = 'start rec...';\n    navigator.mediaDevices.getUserMedia({\n        audio: true\n    }).then((stream) => {\n        mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.ondataavailable = (e) => {\n            audioChunks.push(e.data);\n        };\n        mediaRecorder.onstop = (e) => {\n            const audioBlob = new Blob(audioChunks, {\n                type: 'audio/wav'\n            });\n            audioChunks = [];\n            const file = new File([\n                audioBlob\n            ], 'recordedAudio.wav', {\n                type: 'audio/wav'\n            });\n            convertToText(file);\n        };\n        mediaRecorder.start();\n        isRecording = true;\n        document.getElementById('recordingStatus').innerText = 'Recording...';\n        document.getElementById('recordButton').innerText = 'Stop Recording';\n    });\n}\nfunction stopRecording() {\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    console.log('stop rec');\n    transcribedText.innerHTML = 'stop rec... wait to transcript';\n    mediaRecorder.stop();\n    isRecording = false;\n    document.getElementById('recordingStatus').innerText = 'Not Recording';\n    document.getElementById('recordButton').innerText = 'Start Recording';\n}\n\nfunction convertToText(recordedFile) {\n    const fileInput = document.getElementById('speechToTextInput');\n    const file = recordedFile || fileInput.files[0];\n    const api_key = 'your_openai_api_key';\n    if (!api_key || !isValidOpenAIKey(api_key)) {\n        showToast();\n        return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('model', 'whisper-1');\n    fetch('https://api.openai.com/v1/audio/transcriptions', {\n        method: 'POST',\n        headers: {\n            Authorization: `Bearer ${api_key}`\n        },\n        body: formData\n    }).then((response) => {\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n    }).then((data) => {\n        const transcribedTextElement = document.getElementById('transcribedText');\n        if (transcribedTextElement) {\n            transcribedTextElement.innerText = data.text;\n        }\n        const textToSpeechInputElement = document.getElementById('textToSpeechInput');\n        if (textToSpeechInputElement) {\n            textToSpeechInputElement.value = data.text;\n        }\n        console.log(data);\n    }).catch((error) => console.error('Error:', error));\n}\n"],"names":["api_key","mediaRecorder","textToSpeechButton","document","querySelector","ttsAudio","isValidOpenAIKey","key","regexPattern","test","showToast","toastContainer","createElement","id","classList","add","toast","setAttribute","toastHeader","strong","textContent","button","type","appendChild","toastBody","body","toastEl","bootstrap","Toast","show","addEventListener","console","log","fetch","method","headers","Authorization","JSON","stringify","model","input","getElementById","value","voice","selectedVoice","toLowerCase","then","response","ok","Error","status","blob","url","URL","createObjectURL","src","play","catch","error","audioChunks","pressthenreleaseButton","transcribedText","innerHTML","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","ondataavailable","e","push","data","onstop","audioBlob","Blob","convertToText","recordedFile","fileInput","file","files","formData","FormData","append","json","transcribedTextElement","innerText","text","textToSpeechInputElement","File","start","stop"],"version":3,"file":"tts.d227d167.js.map"}