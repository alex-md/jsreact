{"mappings":"ACCA,MAAM,EAAY,SAAS,cAAc,CAAC,cACpC,EAAe,SAAS,cAAc,CAAC,iBACvC,EAAc,SAAS,cAAc,CAAC,YACtC,EAAc,SAAS,cAAc,CAAC,iBAGtC,EAAgB,EAAE,CAGlB,EAAgB,kBAQtB,eAAe,EAAc,CAAK,EACjC,EAAM,cAAc,GAGpB,IAAM,EAAS,EAAU,KAAK,CAAC,IAAI,GAG7B,EAAS,EAAY,KAAK,CAAC,IAAI,GAGrC,GAAI,CAAC,EAAQ,CACZ,EAAY,WAAW,CAAG,0BAC1B,MACD,CACA,GAAI,CAAC,EAAc,IAAI,CAAC,GAAS,CAChC,EAAY,WAAW,CAAG,kBAC1B,MACD,CAGA,EAAY,WAAW,CAAG,GAG1B,EAAY,WAAW,CAAG,aAE1B,GAAI,CAEH,IAAM,EAAa,MAAM,EAAc,EAAQ,GAG/C,EAAc,IAAI,CAAC,GACnB,EAAY,SAAS,CAAG,EACtB,GAAG,CAAC,AAAC,GAAW,CAAC,wBAAwB,EAAE,EAAO,IAAI,CAAC,EACvD,IAAI,CAAC,IACP,EAAU,KAAK,CAAG,EACnB,CAAE,MAAO,EAAO,CACf,QAAQ,KAAK,CAAC,EACf,CACD,CASA,eAAe,EAAe,CAAM,CAAE,CAAM,EAgB3C,IAAM,EAAU,CACf,OAAQ,OACR,QAAS,CACR,eAAgB,mBAChB,cAAe,CAAC,OAAO,EAAE,EAAO,CAAC,AAClC,EACA,KAAM,KAAK,SAAS,CApBD,CACnB,MAAO,gBACP,SAAU,IACN,EAAc,GAAG,CAAC,AAAA,GAAY,CAAA,CAAE,KAAM,OAAQ,QAAA,CAAQ,CAAA,GACzD,CAAE,KAAM,OAAQ,QAAS,CAAO,EAChC,CACD,YAAa,GACb,WAAY,IACZ,MAAO,EACP,kBAAmB,EACnB,iBAAkB,CACnB,EAUA,EAGM,EAAW,MAAM,MAAM,6CAA8C,GAI3E,MAAO,AAHM,CAAA,MAAM,EAAS,IAAI,EAAhC,EAGY,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,AACvC,CAnFA,EAAa,gBAAgB,CAAC,QAAS,GAGvC,EAAU,gBAAgB,CAAC,UA0C3B,SAAwB,CAAK,EACV,UAAd,EAAM,GAAG,GACZ,EAAM,cAAc,GACpB,EAAa,KAAK,GAEpB","sources":["<anon>","src/scripts/chat.js"],"sourcesContent":["// Get elements\nconst inputText = document.getElementById(\"input-text\"); // Text input\nconst submitButton = document.getElementById(\"submit-button\"); // Submit button\nconst responseDiv = document.getElementById(\"response\"); // Response div\nconst apiKeyInput = document.getElementById(\"api-key-input\"); // API key input\n// Initialize prompt history\nconst promptHistory = [];\n// Define regex pattern for API key validation\nconst apiKeyPattern = /^sk-[A-Za-z0-9]/;\n// Add event listener to submit button\nsubmitButton.addEventListener(\"click\", handleSubmit);\n// Add event listener to input text element\ninputText.addEventListener(\"keydown\", handleKeyDown);\nasync function handleSubmit(event) {\n    event.preventDefault(); // Prevent default form submission behavior\n    // Get input text\n    const prompt = inputText.value.trim();\n    // Get API key\n    const apiKey = apiKeyInput.value.trim();\n    // Validate API key\n    if (!apiKey) {\n        responseDiv.textContent = \"Please enter an API key\";\n        return;\n    }\n    if (!apiKeyPattern.test(apiKey)) {\n        responseDiv.textContent = \"Invalid API key\";\n        return;\n    }\n    // Clear any previous error messages\n    responseDiv.textContent = \"\";\n    // Show loading message\n    responseDiv.textContent = \"Loading...\";\n    try {\n        // Make API request\n        const aiResponse = await getAIResponse(prompt, apiKey);\n        // Display response\n        promptHistory.push(aiResponse);\n        responseDiv.innerHTML = promptHistory.map((prompt)=>`<p class=\"chat-message\">${prompt}</p>`).join(\"\");\n        inputText.value = \"\";\n    } catch (error) {\n        console.error(error);\n    }\n}\nfunction handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n        event.preventDefault();\n        submitButton.click();\n    }\n}\nasync function getAIResponse(prompt, apiKey) {\n    // Set request data\n    const requestData = {\n        model: \"gpt-3.5-turbo\",\n        messages: [\n            ...promptHistory.map((content)=>({\n                    role: \"user\",\n                    content\n                })),\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ],\n        temperature: 0.7,\n        max_tokens: 160,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n    };\n    // Set fetch options\n    const options = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify(requestData)\n    };\n    // Make API request\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", options);\n    const data = await response.json();\n    // Return AI response\n    return data.choices[0].message.content;\n}\n\n//# sourceMappingURL=chat.31f3a129.js.map\n","// Get elements\nconst inputText = document.getElementById(\"input-text\"); // Text input\nconst submitButton = document.getElementById(\"submit-button\"); // Submit button\nconst responseDiv = document.getElementById(\"response\"); // Response div\nconst apiKeyInput = document.getElementById(\"api-key-input\"); // API key input\n\n// Initialize prompt history\nconst promptHistory = [];\n\n// Define regex pattern for API key validation\nconst apiKeyPattern = /^sk-[A-Za-z0-9]/;\n\n// Add event listener to submit button\nsubmitButton.addEventListener(\"click\", handleSubmit);\n\n// Add event listener to input text element\ninputText.addEventListener(\"keydown\", handleKeyDown);\n\nasync function handleSubmit (event) {\n\tevent.preventDefault(); // Prevent default form submission behavior\n\n\t// Get input text\n\tconst prompt = inputText.value.trim();\n\n\t// Get API key\n\tconst apiKey = apiKeyInput.value.trim();\n\n\t// Validate API key\n\tif (!apiKey) {\n\t\tresponseDiv.textContent = \"Please enter an API key\";\n\t\treturn;\n\t}\n\tif (!apiKeyPattern.test(apiKey)) {\n\t\tresponseDiv.textContent = \"Invalid API key\";\n\t\treturn;\n\t}\n\n\t// Clear any previous error messages\n\tresponseDiv.textContent = \"\";\n\n\t// Show loading message\n\tresponseDiv.textContent = \"Loading...\";\n\n\ttry {\n\t\t// Make API request\n\t\tconst aiResponse = await getAIResponse(prompt, apiKey);\n\n\t\t// Display response\n\t\tpromptHistory.push(aiResponse);\n\t\tresponseDiv.innerHTML = promptHistory\n\t\t\t.map((prompt) => `<p class=\"chat-message\">${prompt}</p>`)\n\t\t\t.join(\"\");\n\t\tinputText.value = \"\";\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nfunction handleKeyDown (event) {\n\tif (event.key === \"Enter\") {\n\t\tevent.preventDefault();\n\t\tsubmitButton.click();\n\t}\n}\n\nasync function getAIResponse (prompt, apiKey) {\n\t// Set request data\n\tconst requestData = {\n\t\tmodel: \"gpt-3.5-turbo\",\n\t\tmessages: [\n\t\t\t...promptHistory.map(content => ({ role: 'user', content })),\n\t\t\t{ role: 'user', content: prompt }\n\t\t],\n\t\ttemperature: 0.7,\n\t\tmax_tokens: 160,\n\t\ttop_p: 1,\n\t\tfrequency_penalty: 0,\n\t\tpresence_penalty: 0\n\t};\n\n\t// Set fetch options\n\tconst options = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${apiKey}`\n\t\t},\n\t\tbody: JSON.stringify(requestData)\n\t};\n\n\t// Make API request\n\tconst response = await fetch(\"https://api.openai.com/v1/chat/completions\", options);\n\tconst data = await response.json();\n\n\t// Return AI response\n\treturn data.choices[0].message.content;\n}\n"],"names":["inputText","document","getElementById","submitButton","responseDiv","apiKeyInput","promptHistory","apiKeyPattern","handleSubmit","event","preventDefault","prompt","value","trim","apiKey","textContent","test","aiResponse","getAIResponse","push","innerHTML","map","join","error","console","options","method","headers","Authorization","body","JSON","stringify","model","messages","content","role","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","response","fetch","data","json","choices","message","addEventListener","key","click"],"version":3,"file":"chat.31f3a129.js.map"}